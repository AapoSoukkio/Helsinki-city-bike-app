@page "/stations"
@using Solita.HelsinkiBikeApp.Shared
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject HttpClient Http

<h1>Bike stations</h1>

<div class="search">
    <label for="date">Search by station name</label>
    <input type="text" id="station" name="station" @bind-value="stationName" @onkeydown="SearchOnEnter" />   
    <button type="button" class="btn btn-primary" @onclick="Search">Search</button>
</div>

<div class="pagination">
    <button class="btn btn-primary" disabled="@disablePrevious" @onclick="() => LoadPage(currentPage - 1, previous)">
        <span class="btn-text">Previous</span> 
        <span class="small-text">100 rows</span>
    </button>
    <button class="btn btn-primary" @onclick="() => LoadPage(currentPage + 1, next)">
        <span class="btn-text">Next</span> 
        <span class="small-text">100 rows</span>
    </button>
</div>

<Table>
    <tr>
        <th>Name</th>
        <th>Address</th>
        <th>Details</th>
    </tr>
    @if (bikeStations != null)
    {
        @foreach (var station in bikeStations.Where(j => j != null)) 
        {
            <tr>
                <td>@station.Name</td>
                <td>@station.Osoite</td>
                <td><a href=@($"/station/details/{station.ID}")>Station details and stats</a></td>
            </tr>
        }
    }
</Table>

@if (bikeStations != null && bikeStations.Length < 1)
    {
        <h2>No matches to your search</h2>
    }

@code {
    private BikeStation[]? bikeStations;
    private int currentPage = 1;
    private string next = "next";
    private string previous = "previous";
    private int pageSize = 100;
    private bool disablePrevious = true;
    private int totalPages;
    private string? stationName;

    protected override async Task OnInitializedAsync()

    {
        await LoadPage(currentPage, next);
    }

    private async Task LoadPage(int page, string direction)
    {
        if (page > 1 && direction == "next")
        {
            currentPage++;
            disablePrevious = false;
        }
        else if (page > 1 && direction == "previous")
        {
            currentPage = currentPage - 1;
        }
        else
        {
            disablePrevious = true;
            currentPage = 1;
        }

        var url = $"bikestation/stations?pageNumber={page}&pageSize={pageSize}";

        if (stationName != null)
        {
            url += $"&stationName={stationName}";
        }


        var response = await Http.GetFromJsonAsync<IEnumerable<BikeStation>>(url);
        bikeStations = response?.ToArray();

        if (bikeStations != null && bikeStations.Any())
        {
            var totalRecordsEstimate = 800000; 
            totalPages = (int)Math.Ceiling((decimal)totalRecordsEstimate / pageSize);
        }
        else
        {
            totalPages = 0;
        }
    }

        private async Task Search()
    {
        currentPage = 1;
        await LoadPage(currentPage, next);
    }

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            currentPage = 1;
            await LoadPage(currentPage, next);
        }
    }
}