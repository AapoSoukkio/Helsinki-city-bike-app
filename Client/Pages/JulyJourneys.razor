@page "/julyjourneys"
@using Solita.HelsinkiBikeApp.Shared
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject HttpClient Http

<h1>July Journeys</h1>

@if(julyJourneys == null)
{
    <p>Loading journeys from June...</p>
    <p>Take it easy, we are almost there...</p>
}
else
{
    <div class="search">
        <label for="date">Search by date</label>
        <input type="date" id="date" name="date" min="2021-07-01" max="2021-07-31" @bind-value="departureDate" />   
        <button type="button" class="btn btn-primary" @onclick="Search">Search</button>
    </div>

    <div class="pagination">
        <button class="btn btn-primary" disabled="@disablePrevious" @onclick="() => LoadPage(currentPage - 1, previous, departureDate)">
            <span class="btn-text">Previous</span> 
            <span class="small-text">100 rows</span>
        </button>
        <button class="btn btn-primary" @onclick="() => LoadPage(currentPage + 1, next, departureDate)">
            <span class="btn-text">Next</span> 
            <span class="small-text">100 rows</span>
        </button>
    </div>

    <Table>
        <tr>
            <th>Departure</th>
            <th>Return</th>
            <th>Departure Station Name</th>
            <th>Return Station Name</th>
            <th>Covered Distance (km)</th>
            <th>Duration (min)</th>
        </tr>
        @if (julyJourneys != null)
        {
            @foreach (var journey in julyJourneys.Where(j => j != null))
            {
                decimal coveredDistanceKm = (decimal)journey.CoveredDistance / 1000;

                decimal durationMin = (decimal)journey.Duration / 60;

                <tr>
                    <td>@journey.Departure</td>
                    <td>@journey.Return</td>
                    <td>@journey.DepartureStationName</td>
                    <td>@journey.ReturnStationName</td>
                    <td>@String.Format("{0:N1}", coveredDistanceKm)</td>
                    <td>@String.Format("{0:N1}", durationMin)</td>
                </tr>
            }
        }
    </Table>
}


@code {
  private Summer21Journey[]? julyJourneys;
    private int currentPage = 1;
    private string next = "next";
    private string previous = "previous";
    private int pageSize = 100;
    private bool disablePrevious = true;
    private int totalPages;
    private DateTime? departureDate;

    protected override async Task OnInitializedAsync()

    {
        departureDate = new DateTime(2021, 7, 31);
        await LoadPage(currentPage, next, departureDate);
    }

    private async Task LoadPage(int page, string direction, DateTime? departureDate)
    {
        if (page > 1 && direction == "next")
        {
            currentPage++;
            disablePrevious = false;
        }
        else if (page > 1 && direction == "previous")
        {
            currentPage = currentPage - 1;
        }
        else
        {
            disablePrevious = true;
            currentPage = 1;
        }

        var url = $"summer21journey/getjourneys?pageNumber={page}&pageSize={pageSize}";

        if (departureDate != null)
        {
            url += $"&departureDate={departureDate.Value.ToString("yyyy-MM-dd")}";
        }

        var response = await Http.GetFromJsonAsync<IEnumerable<Summer21Journey>>(url);
        julyJourneys = response?.ToArray();

        if (julyJourneys != null && julyJourneys.Any())
        {
            var totalRecordsEstimate = 800000; 
            totalPages = (int)Math.Ceiling((decimal)totalRecordsEstimate / pageSize);
        }
        else
        {
            totalPages = 0;
        }
    }

        private async Task Search()
    {
        currentPage = 1;
        await LoadPage(currentPage, next, departureDate);
    }
}