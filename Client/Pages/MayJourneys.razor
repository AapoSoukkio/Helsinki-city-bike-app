@page "/mayjourneys"
@using Solita.HelsinkiBikeApp.Shared
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject HttpClient Http

<h1>May Journeys</h1>

<div class="search">
    <label for="date">Search by date</label>
    <input type="date" id="date" name="date" min="2021-05-01" max="2021-05-31" @bind-value="departureDate" />   
    <button type="button" class="btn btn-primary" @onclick="Search">Search</button>
</div>

<div class="pagination">
    <button class="btn btn-primary" disabled="@disablePrevious" @onclick="() => LoadPage(currentPage - 1, previous)">
        <span class="btn-text">Previous</span> 
        <span class="small-text">100 rows</span>
    </button>
    <button class="btn btn-primary" @onclick="() => LoadPage(currentPage + 1, next)">
        <span class="btn-text">Next</span> 
        <span class="small-text">100 rows</span>
    </button>
</div>

<Table>
    <tr>
        <th>Departure</th>
        <th>Return</th>
        <th>Departure Station Name</th>
        <th>Return Station Name</th>
        <th>Covered Distance (km)</th>
        <th>Duration (min)</th>
    </tr>
    @if (mayJourneys != null)
    {
        @foreach (var journey in mayJourneys.Where(j => j != null))
        {
            // Convert meters to kilometers
            decimal coveredDistanceKm = (decimal)journey.CoveredDistance / 1000;

            // Convert seconds to minutes
            decimal durationMin = (decimal)journey.Duration / 60;

            <tr>
                <td>@journey.Departure</td>
                <td>@journey.Return</td>
                <td>@journey.DepartureStationName</td>
                <td>@journey.ReturnStationName</td>
                <td>@String.Format("{0:N1}", coveredDistanceKm)</td>
                <td>@String.Format("{0:N1}", durationMin)</td>
            </tr>
        }
    }
</Table>

@code {
    private MayJourney[]? mayJourneys;
    private int currentPage = 1;
    private string next = "next";
    private string previous = "previous";
    private int pageSize = 100;
    private bool disablePrevious = true;
    private int totalPages;
    private DateTime? departureDate;

    protected override async Task OnInitializedAsync()

    {
        await LoadPage(currentPage, next);
        departureDate = new DateTime(2021, 5, 31);
    }

    private async Task LoadPage(int page, string direction)
    {
        if (page > 1 && direction == "next")
        {
            currentPage++;
            disablePrevious = false;
        }
        else if (page > 1 && direction == "previous")
        {
            currentPage = currentPage - 1;
        }
        else
        {
            disablePrevious = true;
            currentPage = 1;
        }

        var url = $"mayjourney/getjourneys?pageNumber={page}&pageSize={pageSize}";

        if (departureDate != null)
        {
            url += $"&departureDate={departureDate.Value.ToString("yyyy-MM-dd")}";
        }

        var response = await Http.GetFromJsonAsync<IEnumerable<MayJourney>>(url);
        mayJourneys = response?.ToArray();

        if (mayJourneys != null && mayJourneys.Any())
        {
            var totalRecords = 800000; //TODO this is just estimate number of the rows on database --> Get the real number from backend
            totalPages = (int)Math.Ceiling((decimal)totalRecords / pageSize);
        }
        else
        {
            totalPages = 0;
        }
    }

        private async Task Search()
    {
        currentPage = 1;
        await LoadPage(currentPage, next);
    }
}