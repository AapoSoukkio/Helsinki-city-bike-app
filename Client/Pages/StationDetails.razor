@page "/station/details/{id:int}"
@using Solita.HelsinkiBikeApp.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Staion details</PageTitle>

@if (null == bikeStation)
{
    <p>Loading station...</p>
}
else
{
    <span>@bikeStation.Adress</span> <span>@bikeStation.Name</span>
    <br />
    <span>Total number of journeys starting from the station: @totalStarts</span>
    <br />
    <span>Total number of journeys ending at the station: @totalEnded</span>
    <br />
    <br />
    <span>The average distance of a journey starting from the station in kilometers: @avgDistJourneysStarted</span>
    <br />
    <br />
    <span>The average distance of a journey ending at the station in kilometers: @avgDistJourneysEnded</span>
    <br />
    <a href="@($"https://www.google.com/maps?q={bikeStation.Y},{bikeStation.X}")" target="_blank">View on Google Maps</a>
    <br />

    @if (topReturnStations.Count > 0)
{
    <h4>Top 5 return stations for journeys starting from this station:</h4>
    <ul>
        @foreach (var station in topReturnStations)
        {
            <li>@station.Name</li>
        }
    </ul>
}

}

@code {

    private BikeStation? bikeStation;
    //private Summer21Journey? summer21Journey; is this necessary?

    private int? totalStarts = 0;
    private int? totalEnded = 0;
    private double? avgDistJourneysStarted = 0;
    private double? avgDistJourneysEnded = 0;
    private List<BikeStation> topReturnStations = new List<BikeStation>();

    [Parameter]
    public int ID { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var stations = await Http.GetFromJsonAsync<BikeStation[]>($"bikestation");
        bikeStation = stations.FirstOrDefault(s => s.ID == ID);

        if (bikeStation != null)
        {
            totalStarts = await NumberOfJourneysStarted(ID);
            totalEnded = await NumberOfJourneysEnded(ID);
            avgDistJourneysStarted = await AvgDistJourneysStarting(ID);
            avgDistJourneysEnded = await AvgDistJourneysEnding(ID);
            await GetTopReturnStations(ID);
        }

    }

    //Get the total number of journeys started from station
    private async Task<int> NumberOfJourneysStarted(int id)
    {
        int totalStarts = 0;

        var url = $"summer21journey/journeysstarted?id={id}";
        HttpResponseMessage response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            string jsonResponse = await response.Content.ReadAsStringAsync();
            if (int.TryParse(jsonResponse, out int i))
            {
                totalStarts += int.Parse(jsonResponse);
            }
        }
        else
        {
            throw new Exception("Failed to get the number of journeys started may.");
        }

        return totalStarts;
    }

    //Get the total number of journeys ending at the station
    private async Task<int> NumberOfJourneysEnded(int id)
    {
        int totalEnded = 0;

        var url = $"summer21journey/journeysended?id={id}";
        HttpResponseMessage response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            string jsonResponse = await response.Content.ReadAsStringAsync();
            if (int.TryParse(jsonResponse, out int i))
            {
                totalEnded += int.Parse(jsonResponse);
            }
        }
        else
        {
            throw new Exception("Failed to get the number of journeys ended may.");
        }

        return totalEnded;
    }

    //Get average distance of a journey starting from the station
    private async Task<double> AvgDistJourneysStarting(int id)
    {
        var url = $"summer21journey/average_distance_starting_from_station?id={id}";
        double averageDistance = await Http.GetFromJsonAsync<double>(url);
        return averageDistance;
    }

    //Get average distance of a journey ending at the station
    private async Task<double> AvgDistJourneysEnding(int id)
    {
        var url = $"summer21journey/average_distance_ending_at_station?id={id}";
        double averageDistance = await Http.GetFromJsonAsync<double>(url);
        return averageDistance;
    }

    private async Task GetTopReturnStations(int id)
    {
        var url = $"summer21journey/top_return_stations?id={id}";

        topReturnStations = await Http.GetFromJsonAsync<List<BikeStation>>(url);
    }
}