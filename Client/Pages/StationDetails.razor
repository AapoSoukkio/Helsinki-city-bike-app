@page "/station/details/{id:int}"
@using Solita.HelsinkiBikeApp.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Staion details</PageTitle>

@if (null == bikeStation)
{
    <p>Loading station...</p>
}
else
{
    <span>@bikeStation.Adress</span> <span>@bikeStation.Name</span>
    <br />
    <span>Total number of journeys starting from the station: @totalStarts</span>
    <br />
    <span>Total number of journeys ending at the station: @totalEnded</span>
    <br />
    
}

@code {

    private BikeStation? bikeStation;
    private MayJourney? mayJourney;
    private JuneJourney? juneJourney;
    private JulyJourney? julyJourney;

    private int? totalStarts = 0;
    private int? totalEnded = 0;

    [Parameter]
    public int ID { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var stations = await Http.GetFromJsonAsync<BikeStation[]>($"bikestation");
        bikeStation = stations.FirstOrDefault(s => s.ID == ID);

        if (bikeStation != null)
        {
            totalStarts = await NumberOfJourneysStarted(ID);
            totalEnded = await NumberOfJourneysEnded(ID);
        }

    }

    //Get the total number of journeys started from station(id)
    private async Task<int> NumberOfJourneysStarted(int id)
    {
        int totalStarts = 0;

        var url = $"summer21journey/journeysstarted?id={id}";
        HttpResponseMessage response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            string jsonResponse = await response.Content.ReadAsStringAsync();
            if (int.TryParse(jsonResponse, out int i))
            {
                totalStarts += int.Parse(jsonResponse);
            }
        }
        else
        {
            throw new Exception("Failed to get the number of journeys started may.");
        }

        return totalStarts;
    }

    //Get the total number of journeys ending at the station(id)
    private async Task<int> NumberOfJourneysEnded(int id)
    {
        int totalEnded = 0;

        var url = $"summer21journey/journeysended?id={id}";
        HttpResponseMessage response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            string jsonResponse = await response.Content.ReadAsStringAsync();
            if (int.TryParse(jsonResponse, out int i))
            {
                totalEnded += int.Parse(jsonResponse);
            }
        }
        else
        {
            throw new Exception("Failed to get the number of journeys ended may.");
        }

        return totalEnded;
    }
}